/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { MeRequestBuilderRequestsMetadata } from './me/index.js';
// @ts-ignore
import { apiClientProxifier } from '@microsoft/kiota-abstractions';
// @ts-ignore
import {
  FormParseNodeFactory,
  FormSerializationWriterFactory,
} from '@microsoft/kiota-serialization-form';
// @ts-ignore
import {
  JsonParseNodeFactory,
  JsonSerializationWriterFactory,
} from '@microsoft/kiota-serialization-json';
// @ts-ignore
import { MultipartSerializationWriterFactory } from '@microsoft/kiota-serialization-multipart';
// @ts-ignore
import {
  TextParseNodeFactory,
  TextSerializationWriterFactory,
} from '@microsoft/kiota-serialization-text';
/**
 * Instantiates a new {@link GetUserApiClient} and sets the default values.
 * @param requestAdapter The request adapter to use to execute the requests.
 */
// @ts-ignore
export function createGetUserApiClient(requestAdapter) {
  if (requestAdapter === undefined) {
    throw new Error('requestAdapter cannot be undefined');
  }
  const serializationWriterFactory =
    requestAdapter.getSerializationWriterFactory();
  const parseNodeFactoryRegistry = requestAdapter.getParseNodeFactory();
  const backingStoreFactory = requestAdapter.getBackingStoreFactory();
  if (parseNodeFactoryRegistry.registerDefaultDeserializer) {
    parseNodeFactoryRegistry.registerDefaultDeserializer(
      JsonParseNodeFactory,
      backingStoreFactory
    );
    parseNodeFactoryRegistry.registerDefaultDeserializer(
      TextParseNodeFactory,
      backingStoreFactory
    );
    parseNodeFactoryRegistry.registerDefaultDeserializer(
      FormParseNodeFactory,
      backingStoreFactory
    );
  }
  if (serializationWriterFactory.registerDefaultSerializer) {
    serializationWriterFactory.registerDefaultSerializer(
      JsonSerializationWriterFactory
    );
    serializationWriterFactory.registerDefaultSerializer(
      TextSerializationWriterFactory
    );
    serializationWriterFactory.registerDefaultSerializer(
      FormSerializationWriterFactory
    );
    serializationWriterFactory.registerDefaultSerializer(
      MultipartSerializationWriterFactory
    );
  }
  if (
    requestAdapter.baseUrl === undefined ||
    requestAdapter.baseUrl === null ||
    requestAdapter.baseUrl === ''
  ) {
    requestAdapter.baseUrl = 'https://graph.microsoft.com/v1.0';
  }
  const pathParameters = {
    baseurl: requestAdapter.baseUrl,
  };
  return apiClientProxifier(
    requestAdapter,
    pathParameters,
    GetUserApiClientNavigationMetadata,
    undefined
  );
}
/**
 * Uri template for the request builder.
 */
export const GetUserApiClientUriTemplate = '{+baseurl}';
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const GetUserApiClientNavigationMetadata = {
  me: {
    requestsMetadata: MeRequestBuilderRequestsMetadata,
  },
};
/* tslint:enable */
/* eslint-enable */
//# sourceMappingURL=getUserApiClient.js.map
